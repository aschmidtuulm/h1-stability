with(LinearAlgebra);
# adjust here for dimension
n := 2;
basis := Vector(n*n);
for i from 1 to n do
    for j from 1 to n do
        basis[(i - 1)*n + j] := x^(j - 1)*y^(i - 1);
    end do;
end do;

basis_eval := proc(x, y, t) 
# evaluate basis
local i, j, s; 
s := Transpose(Vector(t*t));
for i from 1 to t do
    for j from 1 to t do
        s[(i - 1)*t + j] := x^(j - 1)*y^(i - 1); 
    end do;
end do; 
return s; 
end proc;

coordinates := Matrix(n*n, 2);
for i from 1 to n do
    for j from 1 to n do 
        coordinates[(i - 1)*n + j, 1] := (j - 1)/(n - 1); 
        coordinates[(i - 1)*n + j, 2] := (i - 1)/(n - 1); 
    end do;
end do;

V := Matrix(n*n, n*n);
for i from 1 to n*n do
    V[i, 1 .. n*n] := basis_eval(coordinates(i, 1), coordinates(i, 2), n);
end do;
V_inv := MatrixInverse(V);
solut := V_inv . (IdentityMatrix(n*n));
basis_functions := (Transpose(solut)) . basis;
M := Matrix(n*n);
for i from 1 to n*n do
    for j from 1 to n*n do 
        M[i, j] := int(basis_functions[i]*basis_functions[j], x = 0 .. 1, y = 0 .. 1); 
    end do;
end do;
M
