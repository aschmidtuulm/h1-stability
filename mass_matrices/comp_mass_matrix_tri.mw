with(LinearAlgebra);
# adjust here for dimension
n := 2;
dim := add(k, k = 1 .. n);
basis := Vector(dim);
for i from 1 to n do
    for j from 1 to n - i + 1 do 
        basis[1/2*(n*(n + 1) - (n - i + 2)*(n - i + 1)) + j] := x^(j - 1)*y^(i - 1); 
    end do;
end do;

basis_eval := proc(x, y, t) 
local i, j, s, k; 
s := Transpose(Vector(add(k, k = 1 .. n))); 
for i from 1 to t do 
    for j from 1 to t - i + 1 do 
        s[1/2*t*(t + 1) - 1/2*(t - i + 2)*(t - i + 1) + j] := x^(j - 1)*y^(i - 1); 
    end do; 
end do; 
return s; 
end proc;

coordinates := Matrix(dim, 2);
for i from 1 to n do
    for j from 1 to n - i + 1 do
        coordinates[1/2*(n*(n + 1) - (n - i + 2)*(n - i + 1)) + j, 1] := (j - 1)/(n - 1);
        coordinates[1/2*(n*(n + 1) - (n - i + 2)*(n - i + 1)) + j, 2] := (i - 1)/(n - 1); 
    end do;
end do;

V := Matrix(dim, dim);
for i from 1 to dim do
    V[i, 1 .. dim] := basis_eval(coordinates(i, 1), coordinates(i, 2), n);
end do;
V_inv := MatrixInverse(V);
solut := V_inv . (IdentityMatrix(dim));
basis_functions := (Transpose(solut)) . basis;
M := Matrix(dim);
for i from 1 to dim do
    for j from 1 to dim do
        M[i, j] := int(basis_functions[i]*basis_functions[j], y = 0 .. 1 - x, x = 0 .. 1); 
    end do;
end do;
M
